#include "myRect.h"
#include "myString.h"
#include "Bochka.h"
#include <iostream>

#define stop __asm nop

int main()
{
using namespace std;

	//Задание 1.Объявление класса. Создание экземпляра класса.
	//Вызов методов класса. 
	//Откройте закладку Class View - (здесь Вы увидите имена методов и
	//данных - классов Rect и MyString)
	//Обратите внимание на пиктограммы слева от имен членов класса - они
	//обозначают спецификатор доступа к каждому члену класса.

	//Какой конструктор вызывается при создании экземпляра класса? Конструктор по-умолчанию
	{
		Rect rect;
		stop
	}

	//1a. Объявите и определите конструктор с параметрами для
	//инициализации переменных класса. Создайте экземляры класса Rect
	//с помощью конструктора с параметрами. Если компилятор выдает
	//ошибку в предыдущем фрагменте, подумайте - чего ему не
	//хватает? Добейтесь отсутствия ошибок.
	//Выполняя задание с самого начала по шагам, определите:
	//в какой момент происходит вызов конструктора(какого?)?

	//Подсказка: учтите, что пользователь Вашего класса может указывать
	//в качестве параметров любые значения!
	Rect rect1(1);
	Rect rect2(1, 1);
	Rect rect3(1, 1, 1);
	Rect rect4(1, 1, 1, 1);


	stop
	//1б. При конструировании объекта посредством конструктора без параметров
	//предусмотрите инициализацию переменных класса, например, нулем
	{
		Rect rect;
	}
	
	
	stop
	//1в. Объявите, определите и вызовите метод класса InflateRect(), 
	//который увеличивает размеры прямоугольника на заданные приращения
	//(раздвигая стороны от центра - каждую сторону на свое значение).
	//Подсказка: объявить и определить методы можно не только "вручную",
	//но и с помощью Wizard-a Class View. Для этого: откройте закладку
	//ClassView окна проекта, сделайте активным класс Rect и нажмите
	//правую кнопку мыши - в появившемся контекстном меню выберите
	//Add/Add Member Function... С помощью появившейся диалоговой панели
	//"дайте указания" Wizard-у как объявить и определить метод.

	Rect newRect;
	newRect.InflateRect(100, 100, 100, 100);
	

	
	stop


	//Задание 2.Перегрузка конструкторов и методов класса.
	//Конструктор копирования.

	//2а.Объявите и определите конструктор копирования в классе Rect.
	//Выполняя задание по шагам, определите, какой
	//конструктор вызывается при создании r1,r2,r3 и r4?
	//Чему равны переменные созданных объектов?
		Rect r1; //конструктор по-умолчанию
		Rect r2(1,2,3,4); //конструктор с параметрами
		Rect r3 = r1; //конструктор копирования
		Rect r4(r2); //конструктор копирования
		stop


  //2б. Объявите и определите в классе Rect метод InflateRect(),
	//который принимает два аргумента, по умолчанию равных 1, и 
	//раздвигает стороны прямоугольника на на заданные приращения.
	//Для каких объектов вызывается функция InflateRect()? 
		r1.InflateRect(1,1);	
		r2.InflateRect(2,2);
	//Какая из функций InflateRect() вызывается в каждом из трех случаев?
		r3.InflateRect(2,2,2,2); // С 4-мя параметрами
		r3.InflateRect(3,3); // С 2-мя параметрами
		r3.InflateRect(5); // С 2-мя параметрами
		r3.InflateRect(); // С 2-мя параметрами
	stop
	

	
	//Задание 3.Спецификаторы доступа. Инкапсуляция. 
	{
	Rect r;
	//Раскомментируйте следующую строку. Объясните ошибку
	//компилятора

	//int tmp = r.m_left; //закрытое поле, скрыто спецификатором доступа по-умолчанию для классов - private



	//Введите в класс Rect метод void SetAll(...),
	//который присваивают переменным класса передаваемые
	//значения. Вызовите созданный метод, проверьте корректность. 
	{
		Rect rect;
		int l, r, t, b;
		l = r = t = b = 10;
		rect.setAll(l, r, t, b);
	
	//Введите в класс Rect парный метод GetAll(...),
	//который "достает" значения private-переменных класса.
	//Вызовите созданный метод, проверьте корректность. 
		l = r = t = b = 0;
		rect.getAll(l, r, t, b);
		stop

	
	}

	stop
	}


	//Задание 4.Передача экземпляра класса в качестве параметра
	//функции. Возвращение объекта класса по значению. Поставив
	//остановы в конструкторе копирования или выполняя фрагмент
	//по шагам, определите: в какой момент происходит обращение
	//к конструктору копирования. 
	//Создайте глобальную функцию 
	// Rect BoundingRect(Rect, Rect);
	//которая принимает два объекта класса Rect по значению и
	//возвращает объект класса Rect, который является прямоугольником,
	//в который вписаны заданные прямоугольники. Как происходит
	//передача параметров и возвращение объекта класса? //вызываются конструкторы копирования

	//Замечание*: хорошо было бы учесть тот факт, что прямоугольник
	//может оказаться "ненормализованным", то есть m_left>m_right или/и
	//m_top>m_bottom

	{

		Rect r1(1,2,3,4), r2(5,6,7,8),r3;
		r3 = BoundingRect(r1, r2);
	stop
	
	//Задание 4а. Передача объектов по ссылке.
	//Создайте глобальную функцию BoundingRect2, которая выполняет ту же
	//задачу, принимая параметры по ссылке
	//Вызываются ли конструкторы при передаче параметров? Нет не вызываются
	

	r3 = BoundingRect2(r1, r2);
	stop
	}




	//Задание 5. Когда вызываются конструкторы и деструкторы.
	//Объявите и определите
	//явный деструктор класса. Поставьте остановы в 
	//конструкторе (конструкторах) и деструкторе. Определите: когда для
	//каждого из объектов вызывается конструктор, а когда - деструктор?
	{
		Rect r1;//конструктор объекта r1
		Rect*	pR = new Rect(1,2,1,2);	//конструктор объекта по указателю pR
		{
			Rect r2(r1); //конструктор копирования r2
			Rect arRect[2]; //конструктор для элемента массива arRect[0] и arRect[1]
			for(int i=0; i<3; i++)
			{
				static Rect r3 (i,i,i,i) ; //конструктор статического объекта r3, вызывается один раз при создании
				Rect r4(*pR); //конструктор копирования r4, вызывается каждый раз при создании обхекта на новой итерации цикла
				Rect r5(i,i,i,i);//конструктор объекта r5
			}//деструкторы объектов r5 и r4
		}//деструкторы для объектов: arRect[0], arRect[1], r2
		delete pR; //деструктор объекта pR	
		stop
	}//деструктор объекта r1	


// ------------------- 11.02 -----------------------------

	//Задание 6.Конструктор + деструктор = функциональное
	// замыкание. Класс MyString
	// Посредством конструктора (конструкторов) и деструктора обеспечьте
	//корректные инициализацию и деактивацию объекта
	//C помощью остановов определите когда происходит
	//захват и освобождение памяти для строки-члена класса
	{
		MyString str("It's my string!");
		//Создайте метод GetString(), который обеспечит доступ к хранящейся строке.
		//С помощью cout и метода GetString() распечатайте строку объекта str
		//Замечание: подумайте, как следует корректно реализовать метод GetString().

		std::cout << str.GetString();
	}
	stop


	//6a. Раскомментируйте следующий фрагмент. Подумайте - какие
	//неприятности Вас ожидают. Попробуйте исправить положение (как?)
	//Неприятности - оба объекта указывают на одну память. Исправить - физически скопировать строку в новую память.
		{
			MyString str1("The first string!");
			MyString str2 = str1;
		}
		stop

	//6б. Реализуйте метод SetNewString, который будет заменять строку
	// на новую
		{
			MyString str1("The first string!");
			MyString str2 = str1;
			str2.SetNewString("New String");
			stop
		}
	

	//Задание 7.  Решите с помощью классов следующую задачу:
	//даны две бочки известного объема. В одной бочке в начальный момент
	//времени содержится спирт (96%), в другой – вода.
	//Кружкой емкостью 1л переливаем итеративно содержимое из одной бочки
	//в другую следующим способом: на каждой итерации
	//зачерпнули из первой бочки -> вылили во вторую
	//зачерпнули из второй бочки -> вылили в первую.
	//Требуется определить номер итерации, на которой концентрация спирта в
	//первой бочке станет меньше 50%.

	Bochka spirt(96);
	Bochka water(0);
	
	int count = 0;
	while(spirt.GetAlc() > 50)
	{
			spirt.Pereliv(water); //или spirt.Pereliv(water, объем_кружки);
			water.Pereliv(spirt); // аналогично
			count++;
	}
	std::cout << "Iteration number iz: " << count << std::endl;
return 0;

}//end_main

